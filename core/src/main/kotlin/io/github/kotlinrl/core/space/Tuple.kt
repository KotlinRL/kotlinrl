package io.github.kotlinrl.core.space

import kotlin.random.*

/**
 * Represents a composite space consisting of a list of individual `Space` instances.
 * Each space within the `Tuple` handles a specific type, and the `Tuple` itself
 * collectively manages a list of elements where each corresponds to one of the contained spaces.
 *
 * This class provides functionality to:
 * - Sample a list of random elements, one from each space in the tuple.
 * - Check whether a given list of values belongs to the tuple space, ensuring
 *   each element is contained within its respective space and that the list size
 *   matches the number of spaces.
 *
 * @property spaces The list of spaces that define the structure of the tuple.
 *                  Each space is responsible for validating its corresponding element.
 *                  Defaults to an empty list if not specified.
 * @property seed An optional seed used to initialize the random number generator.
 *                When provided, the same seed will produce reproducible sampling
 *                results across instances of the class.
 */
class Tuple(
    val spaces: List<Space<Any>> = emptyList(),
    val seed: Int? = null
) : Space<List<Any>> {
    override val random: Random = seed?.let { Random(it) } ?: Random.Default

    /**
     * Generates a list of random samples, where each sample is generated
     * by invoking the `sample` method of the corresponding space in the `spaces` list.
     *
     * @return A list of sampled values, with each entry corresponding to a sample
     * generated by the respective space in the `spaces` list.
     */
    override fun sample(): List<Any> {
        return spaces.map { it.sample() }
    }

    /**
     * Checks whether the provided value is contained within this composite space.
     * The value must be a list with the same size as the number of spaces in the tuple,
     * and each element must be contained within its corresponding space.
     *
     * @param value The value to check, expected to be a list. Each element of the list
     *              is validated against the corresponding space in the tuple.
     * @return `true` if the value is a list of the correct size and all its elements
     *         are contained within their respective spaces; `false` otherwise.
     */
    override fun contains(value: Any?): Boolean {
        if (value !is List<*>) return false
        if (value.size != spaces.size) return false
        return value.zip(spaces).all { (v, s) -> s.contains(v) }
    }
}
